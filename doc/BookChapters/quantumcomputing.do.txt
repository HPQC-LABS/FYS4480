======= Introduction to many-body physics =======

===== Introduction to the course =====


These lecture notes aim at giving an introduction to the quantum
mechanics of many-body systems and the methods relevant for many-body
problems in such diverse areas as atomic, molecular, solid-state and
nuclear physics, chemistry and materials science. A theoretical
understanding of the behavior of quantum-mechanical many-body systems,
that is, systems containing many interacting particles - is a
considerable challenge in that, normally, no exact solution can be
found.  Instead, reliable methods are needed for approximate but
accurate simulations of such systems.

These notes cover central many-body methods used in a variety of
fields in physics. Starting with basic definitions and second
quantization and Wick's theorems for systems of fermions and bosons,
we move on to the introduction of Feynman diagrams and many-body
methods like full configuration interaction theory and various mean
field approaches like Hartree-Fock theory and density functional
theory. Thereafter, so-called post Hartree-Fock methods like many-body
perturbation theory, coupled cluster theory (standard and unitary) and
other methods will be discussed.  Finally, algorithms from quantum
computing for solving quantum mechanical many-body problems will be
discussed. The present set of notes contain more material than covered
by a regular course and some of these notes can be used for
self-studies or advanced many-body topics. Depending on the interest
of the participants, selected methods can be emphasized over other
ones.



This chapter serves the aim of reminding the reader of some basic
properties of quantum mechanics, in addition to providing a brief
review of linear algebra, which lays the foundations for most of our
mathematical formalism. It plays a central role in our studies and
together with computational methods and various linear algebra
libraries, it provides us with the tools to study complicated systems
of many interacting particles. Our short reminder on linear algebra allows us to catch more than one bird with a stone, we take the liberty of introducing some basic notations and definitions used throughout these lectures.

===== Important Matrix and vector handling packages =====

There are several central software packages for linear algebra and
eigenvalue problems. Several of the more popular ones have been
wrapped into ofter software packages like those from the widely used
text _Numerical Recipes_. The original source codes in many of the
available packages are often taken from the widely used software
package LAPACK, which follows two other popular packages developed in
the 1970s, namely EISPACK and LINPACK.  We describe them shortly here.

  * LINPACK: package for linear equations and least square problems.
  * LAPACK:package for solving symmetric, unsymmetric and generalized eigenvalue problems. From LAPACK's website URL: "http://www.netlib.org" it is possible to download for free all source codes from this library. Both C/C++ and Fortran versions are available.
  * BLAS (I, II and III): (Basic Linear Algebra Subprograms) are routines that provide standard building blocks for performing basic vector and matrix operations. Blas I is vector operations, II vector-matrix operations and III matrix-matrix operations. Highly parallelized and efficient codes, all available for download from URL: "http://www.netlib.org".

When dealing with matrices and vectors a central issue is memory
handling and allocation. If our code is written in Python the way we
declare these objects and the way they are handled, interpreted and
used by say a linear algebra library, requires codes that interface
our Python program with such libraries. For Python programmers,
_Numpy_ is by now the standard Python package for numerical arrays in
Python as well as the source of functions which act on these
arrays. These functions span from eigenvalue solvers to functions that
compute the mean value, variance or the covariance matrix. If you are
not familiar with how arrays are handled in say Python or compiled
languages like C++ and Fortran, the sections in this chapter may be
useful. For C++ programmer, _Armadillo_ is widely used library for
linear algebra and eigenvalue problems. In addition it offers a
convenient way to handle and organize arrays. We discuss this library
as well.   Before we proceed we believe  it may be convenient to repeat some basic features of 
 matrices and vectors.


===== Basic Matrix Features =====

Matrix properties reminder
!bt
\[
 \mathbf{A} =
      \begin{bmatrix} a_{11} & a_{12} & a_{13} & a_{14} \\
                                 a_{21} & a_{22} & a_{23} & a_{24} \\
                                   a_{31} & a_{32} & a_{33} & a_{34} \\
                                  a_{41} & a_{42} & a_{43} & a_{44}
             \end{bmatrix}\qquad
\mathbf{I} =
      \begin{bmatrix} 1 & 0 & 0 & 0 \\
                                 0 & 1 & 0 & 0 \\
                                 0 & 0 & 1 & 0 \\
                                 0 & 0 & 0 & 1
             \end{bmatrix}
\]
!et


The inverse of a matrix is defined by

!bt
\[
\mathbf{A}^{-1} \cdot \mathbf{A} = I
\]
!et

|----------------------------------------------------------------------|
|       Relations      |       Name      | matrix elements             |
|----------------------------------------------------------------------|
| $A = A^{T}$         | symmetric       | $a_{ij} = a_{ji}$            |
| $A = \left (A^{T} \right )^{-1}$ | real orthogonal | $\sum_k a_{ik} a_{jk} = \sum_k a_{ki} a_{kj} = \delta_{ij}$ |
| $A = A^{ * }$          | real matrix     | $a_{ij} = a_{ij}^{ * }$       |
| $A = A^{\dagger}$     |  hermitian      | $a_{ij} = a_{ji}^{ * }$       |
| $A = \left (A^{\dagger} \right )^{-1}$ | unitary | $\sum_k a_{ik} a_{jk}^{ * } = \sum_k a_{ki}^{ * } a_{kj} = \delta_{ij}$ |
|----------------------------------------------------------------------|

=== Some famous Matrices ===

  * Diagonal if $a_{ij}=0$ for $i\ne j$
  * Upper triangular if $a_{ij}=0$ for $i > j$
  * Lower triangular if $a_{ij}=0$ for $i < j$
  * Upper Hessenberg if $a_{ij}=0$ for $i > j+1$
  * Lower Hessenberg if $a_{ij}=0$ for $i < j+1$
  * Tridiagonal if $a_{ij}=0$ for $|i -j| > 1$
  * Lower banded with bandwidth $p$: $a_{ij}=0$ for $i > j+p$
  * Upper banded with bandwidth $p$: $a_{ij}=0$ for $i < j+p$
  * Banded, block upper triangular, block lower triangular....

Some Equivalent Statements. For an $N\times N$ matrix  $\mathbf{A}$ the following properties are all equivalent

  * If the inverse of $\mathbf{A}$ exists, $\mathbf{A}$ is nonsingular.
  * The equation $\mathbf{Ax}=0$ implies $\mathbf{x}=0$.
  * The rows of $\mathbf{A}$ form a basis of $R^N$.
  * The columns of $\mathbf{A}$ form a basis of $R^N$.
  * $\mathbf{A}$ is a product of elementary matrices.
  * $0$ is not eigenvalue of $\mathbf{A}$.

===== Numpy and arrays =====
"Numpy":"http://www.numpy.org/" provides an easy way to handle arrays in Python. The standard way to import this library is as
!bc pycod
import numpy as np
n = 10
x = np.random.normal(size=n)
print(x)
!ec
Here we have defined a vector $x$ with $n=10$ elements with its values given by the Normal distribution $N(0,1)$.
Another alternative is to declare a vector as follows
!bc pycod
import numpy as np
x = np.array([1, 2, 3])
print(x)
!ec
Here we have defined a vector with three elements, with $x_0=1$, $x_1=2$ and $x_2=3$. Note that both Python and C++
start numbering array elements from $0$ and on. This means that a vector with $n$ elements has a sequence of entities $x_0, x_1, x_2, \dots, x_{n-1}$. We could also let (recommended) Numpy to compute the logarithms of a specific array as
!bc pycod
import numpy as np
x = np.log(np.array([4, 7, 8]))
print(x)
!ec

Here we have used Numpy's unary function $np.log$. This function is
highly tuned to compute array elements since the code is vectorized
and does not require looping. We normaly recommend that you use the
Numpy intrinsic functions instead of the corresponding _log_ function
from Python's _math_ module. The looping is done explicitely by the
_np.log_ function. The alternative, and slower way to compute the
logarithms of a vector would be to write

!bc pycod
import numpy as np
from math import log
x = np.array([4, 7, 8])
for i in range(0, len(x)):
    x[i] = log(x[i])
print(x)
!ec
We note that our code is much longer already and we need to import the _log_ function from the _math_ module. 
The attentive reader will also notice that the output is $[1, 1, 2]$. Python interprets automacally our numbers as integers (like the _automatic_ keyword in C++). To change this we could define our array elements to be double precision numbers as
!bc pycod
import numpy as np
x = np.log(np.array([4, 7, 8], dtype = np.float64))
print(x)
!ec
or simply write them as double precision numbers (Python uses 64 bits as default for floating point type variables), that is
!bc pycod
import numpy as np
x = np.log(np.array([4.0, 7.0, 8.0])
print(x)
!ec
To check the number of bytes (remember that one byte contains eight bits for double precision variables), you can use simple use the _itemsize_ functionality (the array $x$ is actually an object which inherits the functionalities defined in Numpy) as 
!bc pycod
import numpy as np
x = np.log(np.array([4.0, 7.0, 8.0])
print(x.itemsize)
!ec


Having defined vectors, we are now ready to try out matrices. We can define a $3 \times 3 $ real matrix $\hat{A}$
as (recall that we user lowercase letters for vectors and uppercase letters for matrices)
!bc pycod
import numpy as np
A = np.log(np.array([ [4.0, 7.0, 8.0], [3.0, 10.0, 11.0], [4.0, 5.0, 7.0] ]))
print(A)
!ec
If we use the _shape_ function we would get $(3, 3)$ as output, that is verifying that our matrix is a $3\times 3$ matrix. We can slice the matrix and print for example the first column (Python organized matrix elements in a row-major order, see below) as
!bc pycod
import numpy as np
A = np.log(np.array([ [4.0, 7.0, 8.0], [3.0, 10.0, 11.0], [4.0, 5.0, 7.0] ]))
# print the first column, row-major order and elements start with 0
print(A[:,0]) 
!ec
We can continue this was by printing out other columns or rows. The example here prints out the second column
!bc pycod
import numpy as np
A = np.log(np.array([ [4.0, 7.0, 8.0], [3.0, 10.0, 11.0], [4.0, 5.0, 7.0] ]))
# print the first column, row-major order and elements start with 0
print(A[1,:]) 
!ec 
Numpy contains many other functionalities that allow us to slice, subdivide etc etc arrays. We strongly recommend that you look up the "Numpy website for more details":"http://www.numpy.org/". Useful functions when defining a matrix are the _np.zeros_ function which declares a matrix of a given dimension and sets all elements to zero
!bc pycod
import numpy as np
n = 10
# define a matrix of dimension 10 x 10 and set all elements to zero
A = np.zeros( (n, n) )
print(A) 
!ec 
or initializing all elements to 
!bc pycod
import numpy as np
n = 10
# define a matrix of dimension 10 x 10 and set all elements to one
A = np.ones( (n, n) )
print(A) 
!ec 
or as unitarily distributed random numbers (see the material on random number generators in the statistics part)
!bc pycod
import numpy as np
n = 10
# define a matrix of dimension 10 x 10 and set all elements to random numbers with x \in [0, 1]
A = np.random.rand(n, n)
print(A) 
!ec 



===== Other Matrix and Vector Operations =====

The following examples show how to compute various quantities like the
_mean_ value of a matrix or a vector and how to use functions like
_reshape_ and _ravel_. These are all useful quantities when scaling
the data and preparing the data for various machine learning
algorithms and when calculating quantities like the mean squared error
or the variance.

!bc pycod
"""
Simple code that tests various numpy functions
"""

import numpy as np
# Simple test-matrix of dim 3 x 4
a = np.array([ [1, 2, 3], [4, 5, 6], [7, 8, 9],[10, 11, 12]],dtype=np.float64)
print(f"The test matrix:{a}")
# This is the total mean summed over all elements, which here has to be 6.5
print(f"This is the total mean summed over all elements:{np.mean(a,dtype=np.float64)}")
# This is the mean for each column, it returns an array with the mean values for each column. It returns a row-like vector
print(f"This is the mean for each column:{np.mean(a, axis=0, keepdims=True,dtype=np.float64)}")
# This is the mean value for each row, it returns an array via the keepdims option which is a column-like vector if
# keepdims=True. Else it return a row-like vector
# Try setting keepdims=False
print(f"This is the mean value for each row:{np.mean(a, axis=1, keepdims=True,dtype=np.float64)}")
# We print then the mean value for each row by  setting keepdims=False
print(f"This is the mean value for each row with keepdims false:{np.mean(a, axis=1, keepdims=False,dtype=np.float64)}")

# Ravel return a contiguous flattened array.
print(f"Flatten  the matrix:{np.ravel(a)}")
# It is the same as reshaping the matrix into a one-dimensional array
print(f"Reshape the matrix to a one-dim array:{a.reshape(-1)}")
#  ‘C’ means to index the elements in row-major, C-style order, with the last axis index changing fastest, back to the first axis index changing slowest.
# ‘F’ means to index the elements in column-major, Fortran-style order, with the first index changing fastest, and the last index changing slowest 
print(np.ravel(a, order='F'))
# When order is ‘A’, it will preserve the array’s ‘C’ or ‘F’ ordering
# ‘A’ means to read the elements in Fortran-like index order if a is Fortran contiguous in memory, C-like order otherwise.
# ‘K’ means to read the elements in the order they occur in memory, except for reversing the data when strides are negative. By default, ‘C’ index order is used.
# Transposing it
print(np.ravel(a.T))
print(np.ravel(a.T, order='A'))

!ec




===== Definitions and vector and matrix operations =====


!bt
\[
\vert x \rangle = \begin{bmatrix} x_0 \\ x_1 \\ x_2 \\ \dots \\ x_{n-2} \\ x_{n-1} \end{bmatrix} 
\]
!et


!bt
\[
\langle x \vert = \vert x \rangle^{\dagger}=\begin{bmatrix} x_0 & x_1 &  x_2 & \dots & x_{n-2} & x_{n-1} \end{bmatrix} 
\]
!et


!bt
\[
\langle x \vert y \rangle =
\]
!et

=== The outer product ===
!bt
\[
\vert x \rangle \langle y \vert  = \begin{bmatrix} x_0y_0^* & x_0y_1^* &  x_0y_2^* & \dots & x_0y_{n-2}^* & x_0y_{n-1}^* \\
                                                   x_1y_0^* & x_1y_1^* &  x_1y_2^* & \dots & x_1y_{n-2}^* & x_1y_{n-1}^* \\
						   \dots    & \dots    & \dots     & \dots & \dots        & \dots \\                                           						         \dots    & \dots    & \dots     & \dots & \dots        & \dots \\
						   x_{n-2}y_0^* & x_{n-2}y_1^* &  x_{n-2}y_2^* & \dots & x_{n-2}y_{n-2}^* & x_{n-2}y_{n-1}^* \\
						   x_{n-1}y_0^* & x_{n-1}y_1^* &  x_{n-1}y_2^* & \dots & x_{n-1}y_{n-2}^* & x_{n-1}y_{n-1}^* \\
\end{bmatrix} 
\]
!et



=== Tensor products ===
Consider now two vectors with length $n=2$, with elements

!bt
\[
\vert x \rangle = \begin{bmatrix} x_0 \\ x_1 \end{bmatrix}, 
\]
!et
and
!bt
\[
\vert x \rangle = \begin{bmatrix} y_0 \\ y_1 \end{bmatrix}, 
\]
!et

!bt
\[
\vert x \rangle \otimes \vert y \rangle = \vert xy \rangle  = \begin{bmatrix} x_0y_0 \\ x_0y_1 \\ x_1y_0 \\ x_1y_1 \end{bmatrix}, 
\]
!et
which is now a vector of length $4$. 
The tensor product of two matrices is defined as




=== Representation of states ===


Before we proceed we need several definitions.  Throughout these
lectures we will assume that the interacting part of the Hamiltonian
can be approximated by a two-body interaction.  This means that our
Hamiltonian can be written as the sum of a onebody part, which
includes kinetic energy and an eventual external field, and a twobody
interaction




!bt
\begin{equation}
    \hat{H} = \hat{H}_0 + \hat{H}_I 
    = \sum_{i=1}^A \hat{h}_0(x_i) + \sum_{i < j}^A \hat{v}(r_{ij}),
label{Hnuclei}
\end{equation}
!et
with 
!bt
\begin{equation}
  H_0=\sum_{i=1}^A \hat{h}_0(x_i).
label{hinuclei}
\end{equation}
!et

The onebody part $u_{\mathrm{ext}}(x_i)$ is normally approximated by a
harmonic oscillator potential or the Coulomb interaction an electron
feels from the nucleus. However, other potentials are fully possible,
such as one derived from the self-consistent solution of the
Hartree-Fock equations to be discussed here.



Our Hamiltonian is invariant under the permutation (interchange) of
two particles.  Since we deal with fermions however, the total wave
function is antisymmetric.  Let $\hat{P}$ be an operator which
interchanges two particles.  Due to the symmetries we have ascribed to
our Hamiltonian, this operator commutes with the total Hamiltonian,

!bt 
\[
[\hat{H},\hat{P}] = 0,
 \]
!et
meaning that $\Psi_{\lambda}(x_1, x_2, \dots , x_A)$ is an eigenfunction of 
$\hat{P}$ as well, that is
!bt 
\[
\hat{P}_{ij}\Psi_{\lambda}(x_1, x_2, \dots,x_i,\dots,x_j,\dots,x_A)=
\beta\Psi_{\lambda}(x_1, x_2, \dots,x_i,\dots,x_j,\dots,x_A),
\]
!et
where $\beta$ is the eigenvalue of $\hat{P}$. We have introduced the suffix $ij$ in order to indicate that we permute particles $i$ and $j$.
The Pauli principle tells us that the total wave function for a system of fermions
has to be antisymmetric, resulting in the eigenvalue $\beta = -1$.   



In our case we assume that  we can approximate the exact eigenfunction with a Slater determinant
!bt
\begin{equation}
   \Phi(x_1, x_2,\dots ,x_A,\alpha,\beta,\dots, \sigma)=\frac{1}{\sqrt{A!}}
\left| \begin{array}{ccccc} \psi_{\alpha}(x_1)& \psi_{\alpha}(x_2)& \dots & \dots & \psi_{\alpha}(x_A)\\
                            \psi_{\beta}(x_1)&\psi_{\beta}(x_2)& \dots & \dots & \psi_{\beta}(x_A)\\  
                            \dots & \dots & \dots & \dots & \dots \\
                            \dots & \dots & \dots & \dots & \dots \\
                     \psi_{\sigma}(x_1)&\psi_{\sigma}(x_2)& \dots & \dots & \psi_{\sigma}(x_A)\end{array} \right|, label{eq:HartreeFockDet}
\end{equation}
!et
where  $x_i$  stand for the coordinates and spin values of a particle $i$ and $\alpha,\beta,\dots, \gamma$ 
are quantum numbers needed to describe remaining quantum numbers.  


Since we will deal with Fermions (identical and indistinguishable particles) we will 
form an ansatz for a given state in terms of so-called Slater determinants determined
by a chosen basis of single-particle functions. 

For a given $n\times n$ matrix $\mathbf{A}$ we can write its determinant
!bt
\[
   det(\mathbf{A})=|\mathbf{A}|=
\left| \begin{array}{ccccc} a_{11}& a_{12}& \dots & \dots & a_{1n}\\
                            a_{21}&a_{22}& \dots & \dots & a_{2n}\\  
                            \dots & \dots & \dots & \dots & \dots \\
                            \dots & \dots & \dots & \dots & \dots \\
                            a_{n1}& a_{n2}& \dots & \dots & a_{nn}\end{array} \right|,
\]
!et
in a more compact form as 
!bt
\[
|\mathbf{A}|= \sum_{i=1}^{n!}(-1)^{p_i}\hat{P}_i a_{11}a_{22}\dots a_{nn},
\]
!et
where $\hat{P}_i$ is a permutation operator which permutes the column indices $1,2,3,\dots,n$
and the sum runs over all $n!$ permutations.  The quantity $p_i$ represents the number of transpositions of column indices that are needed in order to bring a given permutation back to its initial ordering, in our case given by $a_{11}a_{22}\dots a_{nn}$ here.




A simple $2\times 2$ determinant illustrates this. We have
!bt
\[
   det(\mathbf{A})=
\left| \begin{array}{cc} a_{11}& a_{12}\\
                            a_{21}&a_{22}\end{array} \right|= (-1)^0a_{11}a_{22}+(-1)^1a_{12}a_{21},
\]
!et
where in the last term we have interchanged the column indices $1$ and $2$. The natural ordering we have chosen is $a_{11}a_{22}$. 


=== Back to the derivation of the energy ===


The single-particle function $\psi_{\alpha}(x_i)$  are eigenfunctions of the onebody
Hamiltonian $h_i$, that is
!bt 
\[
\hat{h}_0(x_i)=\hat{t}(x_i) + \hat{u}_{\mathrm{ext}}(x_i),
\]
!et
with eigenvalues 
!bt 
\[
\hat{h}_0(x_i) \psi_{\alpha}(x_i)=\left(\hat{t}(x_i) + \hat{u}_{\mathrm{ext}}(x_i)\right)\psi_{\alpha}(x_i)=\varepsilon_{\alpha}\psi_{\alpha}(x_i).
\]
!et
The energies $\varepsilon_{\alpha}$ are the so-called non-interacting single-particle energies, or unperturbed energies. 
The total energy is in this case the sum over all  single-particle energies, if no two-body or more complicated
many-body interactions are present.



Let us denote the ground state energy by $E_0$. According to the
variational principle we have
!bt
\[
  E_0 \le E[\Phi] = \int \Phi^*\hat{H}\Phi d\mathbf{\tau}
\]
!et
where $\Phi$ is a trial function which we assume to be normalized
!bt
\[
  \int \Phi^*\Phi d\mathbf{\tau} = 1,
\]
!et
where we have used the shorthand $d\mathbf{\tau}=dx_1dr_2\dots dr_A$.




In the Hartree-Fock method the trial function is the Slater
determinant of Eq.~(ref{eq:HartreeFockDet}) which can be rewritten as 
!bt
\[
  \Phi(x_1,x_2,\dots,x_A,\alpha,\beta,\dots,\nu) = \frac{1}{\sqrt{A!}}\sum_{P} (-)^P\hat{P}\psi_{\alpha}(x_1)
    \psi_{\beta}(x_2)\dots\psi_{\nu}(x_A)=\sqrt{A!}\hat{A}\Phi_H,
\]
!et
where we have introduced the antisymmetrization operator $\hat{A}$ defined by the 
summation over all possible permutations of two particles.



It is defined as
!bt
\begin{equation}
  \hat{A} = \frac{1}{A!}\sum_{p} (-)^p\hat{P},
label{antiSymmetryOperator}
\end{equation}
!et
with $p$ standing for the number of permutations. We have introduced for later use the so-called
Hartree-function, defined by the simple product of all possible single-particle functions
!bt
\[
  \Phi_H(x_1,x_2,\dots,x_A,\alpha,\beta,\dots,\nu) =
  \psi_{\alpha}(x_1)
    \psi_{\beta}(x_2)\dots\psi_{\nu}(x_A).
\]
!et


Both $\hat{H}_0$ and $\hat{H}_I$ are invariant under all possible permutations of any two particles
and hence commute with $\hat{A}$
!bt
\begin{equation}
  [H_0,\hat{A}] = [H_I,\hat{A}] = 0. label{commutionAntiSym}
\end{equation}
!et
Furthermore, $\hat{A}$ satisfies
!bt
\begin{equation}
  \hat{A}^2 = \hat{A},  label{AntiSymSquared}
\end{equation}
!et
since every permutation of the Slater
determinant reproduces it. 



The expectation value of $\hat{H}_0$ 
!bt
\[
  \int \Phi^*\hat{H}_0\Phi d\mathbf{\tau} 
  = A! \int \Phi_H^*\hat{A}\hat{H}_0\hat{A}\Phi_H d\mathbf{\tau}
\]
!et
is readily reduced to
!bt
\[
  \int \Phi^*\hat{H}_0\Phi d\mathbf{\tau} 
  = A! \int \Phi_H^*\hat{H}_0\hat{A}\Phi_H d\mathbf{\tau},
\]
!et
where we have used Eqs.~(ref{commutionAntiSym}) and
(ref{AntiSymSquared}). The next step is to replace the antisymmetrization
operator by its definition and to
replace $\hat{H}_0$ with the sum of one-body operators
!bt
\[
  \int \Phi^*\hat{H}_0\Phi  d\mathbf{\tau}
  = \sum_{i=1}^A \sum_{p} (-)^p\int 
  \Phi_H^*\hat{h}_0\hat{P}\Phi_H d\mathbf{\tau}.
\]
!et


The integral vanishes if two or more particles are permuted in only one
of the Hartree-functions $\Phi_H$ because the individual single-particle wave functions are
orthogonal. We obtain then
!bt
\[
  \int \Phi^*\hat{H}_0\Phi  d\mathbf{\tau}= \sum_{i=1}^A \int \Phi_H^*\hat{h}_0\Phi_H  d\mathbf{\tau}.
\]
!et
Orthogonality of the single-particle functions allows us to further simplify the integral, and we
arrive at the following expression for the expectation values of the
sum of one-body Hamiltonians 
!bt
\begin{equation}
  \int \Phi^*\hat{H}_0\Phi  d\mathbf{\tau}
  = \sum_{\mu=1}^A \int \psi_{\mu}^*(x)\hat{h}_0\psi_{\mu}(x)dx
  d\mathbf{r}.
  label{H1Expectation}
\end{equation}
!et



We introduce the following shorthand for the above integral
!bt
\[
\langle \mu | \hat{h}_0 | \mu \rangle = \int \psi_{\mu}^*(x)\hat{h}_0\psi_{\mu}(x)dx,
\]
!et
and rewrite Eq.~(ref{H1Expectation}) as
!bt
\begin{equation}
  \int \Phi^*\hat{H}_0\Phi  d\tau
  = \sum_{\mu=1}^A \langle \mu | \hat{h}_0 | \mu \rangle.
  label{H1Expectation1}
\end{equation}
!et



The expectation value of the two-body part of the Hamiltonian is obtained in a
similar manner. We have
!bt
\[
  \int \Phi^*\hat{H}_I\Phi d\mathbf{\tau} 
  = A! \int \Phi_H^*\hat{A}\hat{H}_I\hat{A}\Phi_H d\mathbf{\tau},
\]
!et
which reduces to
!bt
\[
 \int \Phi^*\hat{H}_I\Phi d\mathbf{\tau} 
  = \sum_{i\le j=1}^A \sum_{p} (-)^p\int 
  \Phi_H^*\hat{v}(r_{ij})\hat{P}\Phi_H d\mathbf{\tau},
\]
!et
by following the same arguments as for the one-body
Hamiltonian. 



Because of the dependence on the inter-particle distance $r_{ij}$,  permutations of
any two particles no longer vanish, and we get
!bt
\[
  \int \Phi^*\hat{H}_I\Phi d\mathbf{\tau} 
  = \sum_{i < j=1}^A \int  
  \Phi_H^*\hat{v}(r_{ij})(1-P_{ij})\Phi_H d\mathbf{\tau}.
\]
!et
where $P_{ij}$ is the permutation operator that interchanges
particle $i$ and particle $j$. Again we use the assumption that the single-particle wave functions
are orthogonal. 





We obtain
!bt
\begin{align}
  \int \Phi^*\hat{H}_I\Phi d\mathbf{\tau} 
  = \frac{1}{2}\sum_{\mu=1}^A\sum_{\nu=1}^A
    &\left[ \int \psi_{\mu}^*(x_i)\psi_{\nu}^*(x_j)\hat{v}(r_{ij})\psi_{\mu}(x_i)\psi_{\nu}(x_j)
    dx_idx_j \right.\\
  &\left.
  - \int \psi_{\mu}^*(x_i)\psi_{\nu}^*(x_j)
  \hat{v}(r_{ij})\psi_{\nu}(x_i)\psi_{\mu}(x_j)
  dx_idx_j
  \right]. label{H2Expectation}
\end{align}
!et
The first term is the so-called direct term. It is frequently also called the  Hartree term, 
while the second is due to the Pauli principle and is called
the exchange term or just the Fock term.
The factor  $1/2$ is introduced because we now run over
all pairs twice. 




The last equation allows us to  introduce some further definitions.  
The single-particle wave functions $\psi_{\mu}(x)$, defined by the quantum numbers $\mu$ and $x$
are defined as the overlap 
!bt
\[
   \psi_{\alpha}(x)  = \langle x | \alpha \rangle .
\]
!et




We introduce the following shorthands for the above two integrals
!bt
\[
\langle \mu\nu|\hat{v}|\mu\nu\rangle =  \int \psi_{\mu}^*(x_i)\psi_{\nu}^*(x_j)\hat{v}(r_{ij})\psi_{\mu}(x_i)\psi_{\nu}(x_j)
    dx_idx_j,
\]
!et
and
!bt 
\[
\langle \mu\nu|\hat{v}|\nu\mu\rangle = \int \psi_{\mu}^*(x_i)\psi_{\nu}^*(x_j)
  \hat{v}(r_{ij})\psi_{\nu}(x_i)\psi_{\mu}(x_j)
  dx_idx_j.  
\]
!et


===== Preparing for later studies: varying the coefficients of a wave function expansion and orthogonal transformations =====

It is common to  expand the single-particle functions in a known basis  and vary the coefficients, 
that is, the new single-particle wave function is written as a linear expansion
in terms of a fixed chosen orthogonal basis (for example the well-known harmonic oscillator functions or the hydrogen-like functions etc).
We define our new single-particle basis (this is a normal approach for Hartree-Fock theory) by performing a unitary transformation 
on our previous basis (labelled with greek indices) as
!bt
\begin{equation}
\psi_p^{new}  = \sum_{\lambda} C_{p\lambda}\phi_{\lambda}. label{eq:newbasis}
\end{equation}
!et
In this case we vary the coefficients $C_{p\lambda}$. If the basis has infinitely many solutions, we need
to truncate the above sum.  We assume that the basis $\phi_{\lambda}$ is orthogonal.




It is normal to choose a single-particle basis defined as the eigenfunctions
of parts of the full Hamiltonian. The typical situation consists of the solutions of the one-body part of the Hamiltonian, that is we have
!bt
\[
\hat{h}_0\phi_{\lambda}=\epsilon_{\lambda}\phi_{\lambda}.
\]
!et 
The single-particle wave functions $\phi_{\lambda}(\mathbf{r})$, defined by the quantum numbers $\lambda$ and $\mathbf{r}$
are defined as the overlap 
!bt
\[
   \phi_{\lambda}(\mathbf{r})  = \langle \mathbf{r} | \lambda \rangle .
\]
!et

In deriving the Hartree-Fock equations, we  will expand the single-particle functions in a known basis  and vary the coefficients, 
that is, the new single-particle wave function is written as a linear expansion
in terms of a fixed chosen orthogonal basis (for example the well-known harmonic oscillator functions or the hydrogen-like functions etc).

We stated that a unitary transformation keeps the orthogonality. To see this consider first a basis of vectors $\mathbf{v}_i$,
!bt
\[
\mathbf{v}_i = \begin{bmatrix} v_{i1} \\ \dots \\ \dots \\v_{in} \end{bmatrix}
\]
!et
We assume that the basis is orthogonal, that is 
!bt
\[
\mathbf{v}_j^T\mathbf{v}_i = \delta_{ij}.
\]
!et
An orthogonal or unitary transformation
!bt
\[
\mathbf{w}_i=\mathbf{U}\mathbf{v}_i,
\]
!et
preserves the dot product and orthogonality since
!bt
\[
\mathbf{w}_j^T\mathbf{w}_i=(\mathbf{U}\mathbf{v}_j)^T\mathbf{U}\mathbf{v}_i=\mathbf{v}_j^T\mathbf{U}^T\mathbf{U}\mathbf{v}_i= \mathbf{v}_j^T\mathbf{v}_i = \delta_{ij}.
\]
!et

This means that if the coefficients $C_{p\lambda}$ belong to a unitary or orthogonal trasformation (using the Dirac bra-ket notation)
!bt
\[
\vert p\rangle  = \sum_{\lambda} C_{p\lambda}\vert\lambda\rangle,
\]
!et
orthogonality is preserved, that is $\langle \alpha \vert \beta\rangle = \delta_{\alpha\beta}$
and $\langle p \vert q\rangle = \delta_{pq}$. 

This propertry is extremely useful when we build up a basis of many-body Stater determinant based states. 

_Note also that although a basis $\vert \alpha\rangle$ contains an infinity of states, for practical calculations we have always to make some truncations._ 





Before we develop for example the Hartree-Fock equations, there is another very useful property of determinants that we will use both in connection with Hartree-Fock calculations and later shell-model calculations.  

Consider the following determinant
!bt
\[
\left| \begin{array}{cc} \alpha_1b_{11}+\alpha_2sb_{12}& a_{12}\\
                         \alpha_1b_{21}+\alpha_2b_{22}&a_{22}\end{array} \right|=\alpha_1\left|\begin{array}{cc} b_{11}& a_{12}\\
                         b_{21}&a_{22}\end{array} \right|+\alpha_2\left| \begin{array}{cc} b_{12}& a_{12}\\b_{22}&a_{22}\end{array} \right|
\]
!et







We can generalize this to  an $n\times n$ matrix and have 
!bt
\[
\left| \begin{array}{cccccc} a_{11}& a_{12} & \dots & \sum_{k=1}^n c_k b_{1k} &\dots & a_{1n}\\
a_{21}& a_{22} & \dots & \sum_{k=1}^n c_k b_{2k} &\dots & a_{2n}\\
\dots & \dots & \dots & \dots & \dots & \dots \\
\dots & \dots & \dots & \dots & \dots & \dots \\
a_{n1}& a_{n2} & \dots & \sum_{k=1}^n c_k b_{nk} &\dots & a_{nn}\end{array} \right|=
\sum_{k=1}^n c_k\left| \begin{array}{cccccc} a_{11}& a_{12} & \dots &  b_{1k} &\dots & a_{1n}\\
a_{21}& a_{22} & \dots &  b_{2k} &\dots & a_{2n}\\
\dots & \dots & \dots & \dots & \dots & \dots\\
\dots & \dots & \dots & \dots & \dots & \dots\\
a_{n1}& a_{n2} & \dots &  b_{nk} &\dots & a_{nn}\end{array} \right| .
\]
!et
This is a property we will use in our Hartree-Fock discussions. 




We can generalize the previous results, now 
with all elements $a_{ij}$  being given as functions of 
linear combinations  of various coefficients $c$ and elements $b_{ij}$,
!bt
\[
\left| \begin{array}{cccccc} \sum_{k=1}^n b_{1k}c_{k1}& \sum_{k=1}^n b_{1k}c_{k2} & \dots & \sum_{k=1}^n b_{1k}c_{kj}  &\dots & \sum_{k=1}^n b_{1k}c_{kn}\\
\sum_{k=1}^n b_{2k}c_{k1}& \sum_{k=1}^n b_{2k}c_{k2} & \dots & \sum_{k=1}^n b_{2k}c_{kj} &\dots & \sum_{k=1}^n b_{2k}c_{kn}\\
\dots & \dots & \dots & \dots & \dots & \dots \\
\dots & \dots & \dots & \dots & \dots &\dots \\
\sum_{k=1}^n b_{nk}c_{k1}& \sum_{k=1}^n b_{nk}c_{k2} & \dots & \sum_{k=1}^n b_{nk}c_{kj} &\dots & \sum_{k=1}^n b_{nk}c_{kn}\end{array} \right|=det(\mathbf{C})det(\mathbf{B}),
\]
!et
where $det(\mathbf{C})$ and $det(\mathbf{B})$ are the determinants of $n\times n$ matrices
with elements $c_{ij}$ and $b_{ij}$ respectively.  
This is a property we will use in our Hartree-Fock discussions. Convince yourself about the correctness of the above expression by setting $n=2$. 






With our definition of the new basis in terms of an orthogonal basis we have
!bt
\[
\psi_p(x)  = \sum_{\lambda} C_{p\lambda}\phi_{\lambda}(x).
\]
!et
If the coefficients $C_{p\lambda}$ belong to an orthogonal or unitary matrix, the new basis
is also orthogonal. 
Our Slater determinant in the new basis $\psi_p(x)$ is written as
!bt
\[
\frac{1}{\sqrt{A!}}
\left| \begin{array}{ccccc} \psi_{p}(x_1)& \psi_{p}(x_2)& \dots & \dots & \psi_{p}(x_A)\\
                            \psi_{q}(x_1)&\psi_{q}(x_2)& \dots & \dots & \psi_{q}(x_A)\\  
                            \dots & \dots & \dots & \dots & \dots \\
                            \dots & \dots & \dots & \dots & \dots \\
                     \psi_{t}(x_1)&\psi_{t}(x_2)& \dots & \dots & \psi_{t}(x_A)\end{array} \right|=\frac{1}{\sqrt{A!}}
\left| \begin{array}{ccccc} \sum_{\lambda} C_{p\lambda}\phi_{\lambda}(x_1)& \sum_{\lambda} C_{p\lambda}\phi_{\lambda}(x_2)& \dots & \dots & \sum_{\lambda} C_{p\lambda}\phi_{\lambda}(x_A)\\
                            \sum_{\lambda} C_{q\lambda}\phi_{\lambda}(x_1)&\sum_{\lambda} C_{q\lambda}\phi_{\lambda}(x_2)& \dots & \dots & \sum_{\lambda} C_{q\lambda}\phi_{\lambda}(x_A)\\  
                            \dots & \dots & \dots & \dots & \dots \\
                            \dots & \dots & \dots & \dots & \dots \\
                     \sum_{\lambda} C_{t\lambda}\phi_{\lambda}(x_1)&\sum_{\lambda} C_{t\lambda}\phi_{\lambda}(x_2)& \dots & \dots & \sum_{\lambda} C_{t\lambda}\phi_{\lambda}(x_A)\end{array} \right|,
\]
!et
which is nothing but $det(\mathbf{C})det(\Phi)$, with $det(\Phi)$ being the determinant given by the basis functions $\phi_{\lambda}(x)$. 



In our discussions hereafter we will use our definitions of single-particle states above and below the Fermi ($F$) level given by the labels
$ijkl\dots \le F$ for so-called single-hole states and $abcd\dots > F$ for so-called particle states.
For general single-particle states we employ the labels $pqrs\dots$. 




The energy functional is
!bt
\[
  E[\Phi] 
  = \sum_{\mu=1}^A \langle \mu | h | \mu \rangle +
  \frac{1}{2}\sum_{{\mu}=1}^A\sum_{{\nu}=1}^A \langle \mu\nu|\hat{v}|\mu\nu\rangle_{AS},
\]
!et 
we found the expression for the energy functional in terms of the basis function $\phi_{\lambda}(\mathbf{r})$. We then  varied the above energy functional with respect to the basis functions $|\mu \rangle$. 
Now we are interested in defining a new basis defined in terms of
a chosen basis as defined in Eq.~(ref{eq:newbasis}). We can then rewrite the energy functional as
!bt
\begin{equation}
  E[\Phi^{New}] 
  = \sum_{i=1}^A \langle i | h | i \rangle +
  \frac{1}{2}\sum_{ij=1}^A\langle ij|\hat{v}|ij\rangle_{AS}, label{FunctionalEPhi2}
\end{equation}
!et
where $\Phi^{New}$ is the new Slater determinant defined by the new basis of Eq.~(ref{eq:newbasis}). 





Using Eq.~(ref{eq:newbasis}) we can rewrite Eq.~(ref{FunctionalEPhi2}) as 
!bt
\begin{equation}
  E[\Psi] 
  = \sum_{i=1}^A \sum_{\alpha\beta} C^*_{i\alpha}C_{i\beta}\langle \alpha | h | \beta \rangle +
  \frac{1}{2}\sum_{ij=1}^A\sum_{{\alpha\beta\gamma\delta}} C^*_{i\alpha}C^*_{j\beta}C_{i\gamma}C_{j\delta}\langle \alpha\beta|\hat{v}|\gamma\delta\rangle_{AS}. label{FunctionalEPhi3}
\end{equation}
!et














\section{Qubits}

\quad The bit is the basic unit of information in classical computing. It represents a  binary logical state. One denotes the two possible states as 0 and 1. So a bit $c$ is
\begin{align}
c = 0 \ \text{OR} \ 1
.\end{align}
A bit can be realized physically by a classical binary event. That is, a classical event that has exactly two distinct outcomes. Examples include the toss of a coin, the presence or absence of a hole in a paper card, or (as used in modern computers) two levels of electric charge stored in a capacitor. Multiple bits (say $n$) are written together in a bit-string
\begin{align}
c = c_0c_2\ldots c_{n-1}
,\end{align}
where $c_i=0,1$ for $i=0,1,\ldots ,n-1$. Thus, $n$ qubits can represent $2^n$ distinct logical states.

The qubit is the basic unit of information in quantum computing. It is the abstraction of a quantum binary event. Examples include an electron being spin-up or spin-down or a quantum state being in one of two energy states. The state of a qubit is spanned by the computational basis which consists of the following two quantum states
\begin{align}
\ket{0}
&=
\begin{pmatrix}
1 \\ 0
\end{pmatrix},
\\
\ket{1}
&=
\begin{pmatrix}
0 \\ 1
\end{pmatrix}.
\end{align}
Thus, a qubit is a two-level quantum state which can be written as a superposition of the computational base state $\ket{0}$ and $\ket{1}$. That is, a qubit $\ket{q}$ can be written as
\begin{align}
\ket{q}=a\ket{0}+b\ket{1},
\end{align}
where $a,b\in\mathbb{C}$, under the restrictions that
\begin{align}
\abs{a}^2+\abs{b}^2=1.
\end{align}
One convenient way to represent the state of a single qubit $\ket{q}$ is on the Bloch sphere \cite{ref:bloch_sphere}. To do so, one parameterizes the state's coefficients with two angles $\theta$ and $\phi$ as
\begin{align}
\ket{\psi}=\cos\frac{\theta}{2}\ket{0}+\sin\frac{\theta}{2}e^{i\phi}\ket{1}
.\end{align}
The qubit $\ket{\psi}$ is represented within the Bloch sphere as a vector with polar angle $\theta$ and azimuthal angle $\phi$ as depicted in Figure \ref{fig:bloch_sphere}.

\begin{figure}
    \centering
    \includegraphics[scale=0.2]{bloch_sphere_image.png}   
    \caption{Depiction of a qubit $\ket{\psi}$ on the Bloch sphere \cite{ref:bloch_pic}.}
    \label{fig:bloch_sphere}
\end{figure}

As $2x1$ complex-valued vectors, qubits can be ``multiplied" in several important ways. To explain them, we must first introduce the adjoint of a qubit. Given a qubit
\begin{align}
\ket{q}
=
\begin{pmatrix}
a \\ b
\end{pmatrix}
,\end{align}
its adjoint $\bra{q}$ is given by its Hermitian  conjugate 
\begin{align}
\bra{q}
=
\ket{q}^\dagger
=
\begin{pmatrix}
a^* & b^*
\end{pmatrix}
,\end{align}
where taking the Hermitian conjugate of an operator $A$ takes each of its elements from $a_{ij}$ to $a^*_{ji}$.

The inner-product of two qubits $\ket{q_1}$ and $\ket{q_2}$ is defined as
\begin{align}
\bra{q_1}\ket{q_2}
=
\begin{pmatrix} 
a^*_1 & b^*_1
\end{pmatrix}
\begin{pmatrix}
a_2 \\ b_2
\end{pmatrix}
=
a^*_1a_2+b^*_1b_2
.\end{align}
The outer-product of two qubits $\ket{q_1}$ and $\ket{q_2}$ is defined as
\begin{align}
\ket{q_1}\bra{q_2}
=
\begin{pmatrix} 
a_1 \\ b_1
\end{pmatrix}
\begin{pmatrix}
a^*_2 & b^*_2
\end{pmatrix}
=
\begin{pmatrix}
a_1a^*_2 & a_1b^*_2
\\
b_1a^*_2 & b_1b^*_2
\end{pmatrix}
.\end{align}
Finally, the tensor-product of two-qubits is defined as
\begin{align}
\ket{q_1q_2}
=
\ket{q_1}\otimes\ket{q_2}
=
\ket{00}&=\begin{pmatrix}
a_1 \\ b_1
\end{pmatrix}
\otimes
\begin{pmatrix}
a_2 \\ b_2
\end{pmatrix}
=\begin{pmatrix}
a_1\begin{pmatrix}
a_2 \\ b_2
\end{pmatrix}
\\
b_1\begin{pmatrix}
a_2 \\ b_2
\end{pmatrix}
\end{pmatrix}
=\begin{pmatrix}
a_1a_2 \\ a_1b_2 \\ b_1a_2 \\ b_1b_2
\end{pmatrix}
.\end{align}



A single-qubit gate is a physical action that is applied to one qubit. It can be represented by a matrix $U$ from the group SU(2). Any single-qubit gate can be parameterized by three angles: $\theta$, $\phi$, and $\lambda$ as follows
\begin{align}
\label{U}
U(\theta,\phi,\lambda)
=
\begin{pmatrix}
\cos\frac{\theta}{2} & -e^{i\lambda}\sin\frac{\theta}{2}
\\
e^{i\phi}\sin\frac{\theta}{2} & e^{i(\phi+\lambda)}\cos\frac{\theta}{2}
\end{pmatrix}
.\end{align}
There are several widely used quantum gates, include the following:
The Pauli gates correspond to the Pauli matrices
\begin{align}
I
&=
\begin{pmatrix}
1 & 0 \\
0 & 1
\end{pmatrix}
\\
X
&=
\begin{pmatrix}
0 & 1 \\
1 & 0
\end{pmatrix}
\\
Y
&=
\begin{pmatrix}
0 & -i \\
i & 0
\end{pmatrix}
\\
Z
&=
\begin{pmatrix}
1 & 0 \\
0 & -1
\end{pmatrix}
,\end{align}
which satisfy the relation
\begin{align}
\comm{\sigma}{\tau}=i\epsilon_{\sigma\tau\upsilon}\upsilon
,\end{align}
for $\sigma,\tau,\upsilon\in\{X,Y,Z\}$. These gates form a basis for the algebra $\mathfrak{su}(2)$. Exponentiating them will thus give us a basis for SU(2), the group within which all single-qubit gates live. These exponentiated Pauli gates are called rotation gates $R_{\sigma}(\theta)$ because they rotate the quantum state around the axis $\sigma=X,Y,Z$ of the Bloch sphere (Figure \ref{fig:bloch_sphere}) by an angle $\theta$. They are defined as
\begin{align}
R_X(\theta)
&=
e^{-i\frac{\theta}{2}X}
=
\begin{pmatrix}
\cos\frac{\theta}{2} & -i\sin\frac{\theta}{2} \\
-i\sin\frac{\theta}{2} & \cos\frac{\theta}{2} 
\end{pmatrix},
\\
R_Y(\theta)
&=
e^{-i\frac{\theta}{2}Y}
=
\begin{pmatrix}
\cos\frac{\theta}{2} & -\sin\frac{\theta}{2} \\
\sin\frac{\theta}{2} & \cos\frac{\theta}{2} 
\end{pmatrix},
\\
R_Z(\theta)
&=
e^{-i\frac{\theta}{2}Z}
=
\begin{pmatrix}
e^{-i\theta/2} & 0 \\
0 & e^{i\theta/2}
\end{pmatrix}
.\end{align}
Because they form a basis for $\text{SU}(2)$, any single-qubit gate can be decomposed into three rotation gates. Indeed
\begin{align}
R_z(\phi)R_y(\theta)R_z(\lambda)
&=
\begin{pmatrix}
e^{-i\phi/2} & 0 \\
0 & e^{i\phi/2}
\end{pmatrix}
\begin{pmatrix}
\cos\frac{\theta}{2} & -\sin\frac{\theta}{2} \\
\sin\frac{\theta}{2} & \cos\frac{\theta}{2} 
\end{pmatrix}
\begin{pmatrix}
e^{-i\lambda/2} & 0 \\
0 & e^{i\lambda/2}
\end{pmatrix}
\\
&=
e^{-i(\phi+\lambda)/2}
\begin{pmatrix}
\cos\frac{\theta}{2} & -e^{i\lambda}\sin\frac{\theta}{2}
\\
e^{i\phi}\sin\frac{\theta}{2} & e^{i(\phi+\lambda)}\cos\frac{\theta}{2}
\end{pmatrix}
,\end{align}
which is, up to a global phase, equal to the expression for an arbitrary single-qubit gate (\ref{U}).

\subsection{Two-Qubit Gates}

A two-qubit gate is a physical action that is applied to two qubits. It can be represented by a matrix $U$ from the group SU(4). One important type of two-qubit gates are controlled gates, which work as follows: Suppose $U$ is a single-qubit gate. A controlled-$U$ gate ($CU$) acts on two qubits: a control qubit $\ket{x}$ and a target qubit $\ket{y}$. The controlled-$U$ gate applies the identity $I$ or the single-qubit gate $U$ to the target qubit if the control gate is in the zero state $\ket{0}$ or the one state $\ket{1}$, respectively. The control qubit is not acted upon. This can be represented as follows:
\begin{align}
CU\ket{xy}=
\begin{cases}
\ket{xy} & \text{if} \ \ket{x}=\ket{0}
\\
\ket{x}U\ket{y} & \text{if} \ \ket{x}=\ket{1}
\end{cases}
.\end{align}
The action of a controlled-$U$ gate $CU$ can be represented in a quantum circuit as follows
\begin{align}
\Qcircuit @C=1em @R=3em 
{
\lstick{\ket{x}} & \ctrl{1} & \rstick{\ket{x}} \qw
\\
\lstick{\ket{y}} & \gate{U} & \rstick{\begin{cases}\ket{y}, & \ket{x}=\ket{0} \\ U\ket{y}, & \ket{a}=\ket{x}\end{cases}} \qw
}
\\
\nonumber
\end{align}
It can be written in matrix form by writing it as a superposition of the two possible cases, each written as a simple tensor product
\begin{align}
CU 
&= \ket{0}\bra{0}\otimes I + \ket{1}\bra{1}\otimes U
\\
&=\begin{pmatrix}
1 & 0 & 0 & 0 \\
0 & 1 & 0 & 0 \\
0 & 0 & u_{00} & u_{01} \\
0 & 0 & u_{10} & u_{11}
\end{pmatrix}
.\end{align}
One of the most fundamental controlled gates is the CNOT gate. It is defined as the controlled-$X$ gate $CX$ and thus flips the state of the target qubit if the control qubit is in the zero state $\ket{0}$. It can be written in matrix form as follows:
\begin{align}
\text{CNOT}
=\begin{pmatrix}
1 & 0 & 0 & 0 \\
0 & 1 & 0 & 0 \\
0 & 0 & 0 & 1 \\
0 & 0 & 1 & 0
\end{pmatrix}
.\end{align}
A widely used two-qubit gate that goes beyond the simple controlled function is the SWAP gate. It swaps the states of the two qubits it acts upon
\begin{align}
\text{SWAP}\ket{xy}=\ket{yx}
,\end{align}
as depicted in the quantum circuit below
\begin{align}
\label{swap_def}
\Qcircuit
{
\lstick{\ket{x}} & \qswap      & \rstick{\ket{y}} \qw
\\
\lstick{\ket{y}} & \qswap \qwx & \rstick{\ket{x}} \qw
}
,\end{align}
and has the following matrix form
\begin{align}
\label{swap_def}
\text{SWAP}
=\begin{pmatrix}
1 & 0 & 0 & 0 \\
0 & 0 & 1 & 0 \\
0 & 1 & 0 & 0 \\
0 & 0 & 0 & 1
\end{pmatrix}
.\end{align}
It can be decomposed into a series of three CNOTs, each of which has its directionality flipped from the previous
\begin{align}
\Qcircuit
{
\lstick{\ket{x}} & \ctrl{1} & \targ     & \ctrl{1} & \rstick{\ket{y}} \qw
\\
\lstick{\ket{y}} & \targ    & \ctrl{-1} & \targ    & \rstick{\ket{x}} \qw
}
\end{align}
As for arbitrary two-qubit gates $U\in\text{SU(4)}$, they can be optimally decomposed (up to a global phase) into the following sequence \cite{ref:kak} involving three parameters, fifteen elementary one-qubit gates and three CNOT gates
\begin{align}
\Qcircuit
{
\qw & \gate{U_1} & \ctrl{1} & \gate{R_y(\theta_1)} & \targ      & \gate{R_y(\theta_2)} & \ctrl{1} & \gate{U_3} & \qw
\\
\qw & \gate{U_2} & \targ    & \gate{R_z(\theta_3)} & \ctrl{-1} & \qw                  & \targ     & \gate{U_4} & \qw
}
\end{align}
where $U_1,U_2,U_3,U_4$ are single-qubit gates, each of which can be decomposed into three elementary one-qubit gates (rotation gates). Additionally, $\theta_1,\theta_2,\theta_3$ are parameters to be determined by the arbitrary two-qubit gate to be decomposed. Two-qubit gates that are restricted to $U\in\text{SO(4)}$ can be decomposed into a shorter depth circuit consisting of just twelve elementary single-qubit gates and two CNOT gates
\begin{align}
\Qcircuit
{
\qw & \gate{R_z(\pi/2)} & \gate{R_y(\pi/2)} & \ctrl{1} & \gate{U_1} & \ctrl{1} & \gate{R^*_y(\pi/2)} & \gate{R^*_z(\pi/2)} & \qw
\\
\qw & \gate{R_z(\pi/2)} & \qw               & \targ    & \gate{U_2} & \targ    & \qw                 & \gate{R^*_z(\pi/2)} & \qw
}
\end{align}




!bt
\[

\]
!et


!bt
\[

\]
!et


!bt
\[

\]
!et
!bt
\[

\]
!et


!bt
\[

\]
!et


!bt
\[

\]
!et


!bt
\[

\]
!et
!bt
\[

\]
!et


!bt
\[

\]
!et


!bt
\[

\]
!et


!bt
\[

\]
!et
!bt
\[

\]
!et


!bt
\[

\]
!et


!bt
\[

\]
!et


!bt
\[

\]
!et
!bt
\[

\]
!et


!bt
\[

\]
!et


!bt
\[

\]
!et


!bt
\[

\]
!et
!bt
\[

\]
!et


!bt
\[

\]
!et


!bt
\[

\]
!et


!bt
\[

\]
!et
!bt
\[

\]
!et


!bt
\[

\]
!et


!bt
\[

\]
!et


!bt
\[

\]
!et
!bt
\[

\]
!et


!bt
\[

\]
!et


!bt
\[

\]
!et


!bt
\[

\]
!et
